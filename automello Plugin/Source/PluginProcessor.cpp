/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <stdio.h>

//==============================================================================
AutomelloPluginAudioProcessor::AutomelloPluginAudioProcessor()
{
  nVoices = 6;
  // Initialise the synth...
  for (int i = nVoices; --i >= 0;)
    synth.addVoice( new SamplerVoice() );
}

AutomelloPluginAudioProcessor::~AutomelloPluginAudioProcessor()
{
}

void AutomelloPluginAudioProcessor::setDirectory( File directory )
{
  synth.clearSounds();
  DirectoryIterator directoryIterator( directory, false, "*.wav", File::findFiles );
  while (directoryIterator.next())
  {
    File theFileItFound( directoryIterator.getFile() );
    String MIDINoteText = theFileItFound.getFileNameWithoutExtension();
    int MIDINote = MIDINoteText.getIntValue();
    if (MIDINote >= 0 && MIDINote < 128)
    {
      WavAudioFormat wavFormat;
        
      ScopedPointer<AudioFormatReader> audioReader( wavFormat.createReaderFor( new FileInputStream( theFileItFound ), true ) );
      
      BigInteger whichNote;
      whichNote.setRange( MIDINote, 1, true );
      
      synth.addSound (new SamplerSound (MIDINoteText,
                                        *audioReader,
                                        whichNote,
                                        MIDINote,   // root midi note
                                        0.01,  // attack time
                                        0.1,  // release time
                                        10.0  // maximum sample length
                                        ));

    }
  }
}

//==============================================================================
const String AutomelloPluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int AutomelloPluginAudioProcessor::getNumParameters()
{
    return 0;
}

float AutomelloPluginAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void AutomelloPluginAudioProcessor::setParameter (int index, float newValue)
{
}

const String AutomelloPluginAudioProcessor::getParameterName (int index)
{
    return String::empty;
}

const String AutomelloPluginAudioProcessor::getParameterText (int index)
{
    return String::empty;
}

const String AutomelloPluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String AutomelloPluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool AutomelloPluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool AutomelloPluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool AutomelloPluginAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool AutomelloPluginAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int AutomelloPluginAudioProcessor::getNumPrograms()
{
    return 0;
}

int AutomelloPluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void AutomelloPluginAudioProcessor::setCurrentProgram (int index)
{
}

const String AutomelloPluginAudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void AutomelloPluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void AutomelloPluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
  synth.setCurrentPlaybackSampleRate (sampleRate);
}

void AutomelloPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void AutomelloPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    int channel = 0;

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getSampleData (channel);

        // ..do something to the data...
    }

    synth.renderNextBlock (buffer, midiMessages, 0, numSamples);
  
    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
}

//==============================================================================
bool AutomelloPluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* AutomelloPluginAudioProcessor::createEditor()
{
    return new AutomelloPluginAudioProcessorEditor (this);
}

//==============================================================================
void AutomelloPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void AutomelloPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new AutomelloPluginAudioProcessor();
}
