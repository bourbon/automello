/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <stdio.h>


//==============================================================================
AutomelloPluginAudioProcessorEditor::AutomelloPluginAudioProcessorEditor (AutomelloPluginAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
      directoryDropDown( "Directories" )
{
  // This is where our plugin's editor size is set.
  setSize (350, 110);
  addAndMakeVisible (&directoryDropDown);
  directoryDropDown.addListener(this);
  directoryDropDown.setEditableText( false );
  File homeDirectory = File::getSpecialLocation( File::userApplicationDataDirectory );
  datasetDirectory = homeDirectory.getFullPathName() + File::separator + JucePlugin_Name + File::separator + "Datasets";
  if ( !datasetDirectory.exists() )
  {
    datasetDirectory.createDirectory();
  }
  DirectoryIterator directoryIterator( datasetDirectory, false, "*", File::findDirectories );
  int item = 1;
  while (directoryIterator.next())
  {
    File theDirectoryItFound( directoryIterator.getFile() );
    directoryDropDown.addItem( theDirectoryItFound.getFileName(), item++ );
  }

}

AutomelloPluginAudioProcessorEditor::~AutomelloPluginAudioProcessorEditor()
{
}

void AutomelloPluginAudioProcessorEditor::resized()
{
  directoryDropDown.setBounds(20, 60, getWidth()-40, getHeight()-80);
}

//==============================================================================
void AutomelloPluginAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll(Colours::grey );
    g.setColour (Colours::black);
    g.setFont (32.0f);
    g.drawFittedText( "automello", 0, 0, getWidth(), 60, Justification::centred, 1 );
}

void AutomelloPluginAudioProcessorEditor::comboBoxChanged( ComboBox *comboBoxThatHasChanged )
{
  if ( comboBoxThatHasChanged == &directoryDropDown )
  {
    std::cout << datasetDirectory.getFullPathName() + directoryDropDown.getText() << std::endl;
    getProcessor()->setDirectory( File( datasetDirectory.getFullPathName() + File::separator + directoryDropDown.getText() ) );
  }
}
